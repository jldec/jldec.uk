{"cli":true,"dir":".","openBrowser":true,"outputOnly":true,"no-watch":true,"no-sockets":true,"editor":true,"user":"runner","basedir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test","pkgJson":{"name":"cloudflare-pages-test","version":"2021.01.30","description":"copy of jldec.me blog built using jldec/pub-server","repository":"git://github.com/jldec/cloudflare-pages-test.git","main":"pub-config.js","dependencies":{"pub-server":"^2.7.4","pub-theme-pubblog":"^1.2.10"},"scripts":{"start":"pub","generate":"pub -O","preview":"pub -S out"},"license":"MIT"},"pkgName":"cloudflare-pages-test","sources":[{"path":"markdown","writable":true,"name":"markdown","type":"FILE","tmp":"tmp/markdown","watch":{},"fragmentDelim":true,"files":[{"path":"/index.md","text":"---- / ----\nname: Jürgen Leschner\ntemplate: home\nmultipage: 1\nimage: /images/hotc2015.jpg\n\n---- /#topmenu ----\n"},{"path":"/404.md","text":"---- /404 ----\nname: Not found\nmultipage: 1\nnocrawl: 1\n\n# Sorry! This page is unavailable.\n"},{"path":"/a-web-for-everyone.md","text":"---- /a-web-for-everyone ----\ntitle: A Web for Everyone\nimage: /images/oldstreet.jpg\ndate: 2019-08-08\ntemplate: post\n\n\n## To publish on the web all you __really__ need is a domain name\n\nYou acquire a domain name by filling in a form and paying the domain name registrar. Usually it's a simple process, and doesn't cost a lot.\n\nBy owning the name, you control **what** appears when someone clicks on [https://your-name/](/).\n\nAs the domain owner you also control **who** can publish and who can see the content on your site.\n\nYou can limit access to just your friends, or you can share the domain with your family say, or with everyone in your company, or with all the people in your school.\n\nAnd, the domain owner decides whether to subject visitors to tracking by 3rd parties like Google and Facebook -- or not _!smile-o lg spin_.\n\n## So, why isn't everyone doing this?\n\nThe reality is that it's easier to sign up for a service like Instagram or SnapChat, where you can share your photos with your friends, than it is to buy your own domain name, and choose a hosting provider and a theme, and publish your content yourself. \n\n> Publishing content on the web yourself is simply not convenient -- yet.\n\nFor most people, allowing yourself to be tracked and exposed to advertising is a small price to pay for the convenience of installing an App and connecting with your friends right away.\n\n## But, things are changing\n\nTools for creating content are getting better, and services like [netlify](https://www.netlify.com/) are making it easier to register a domain and publish content on the web.\n\nThese tools and services are targeting developers today, but I think we should be optimistic. Soon these powers will be just as accessible to non-technical users, and people will be communicating privately, without tracking, using their own domains on the web.\n\n> Creating an open Web where anyone can put anything on the Internet is the future.\n\n_from: https://2019.fullstackfest.com/podcast/ (~26:00)_\n\n<iframe src=\"https://player.pippa.io/full-stack-cast/episodes/sara-vieira-gatekeeping-airports-and-making-the-web-for-ever?theme=white&cover=1&latest=1\" frameBorder=\"0\" width=\"100%\" height=\"110px\" allow=\"autoplay\"></iframe>\n\n> _!child_ _!globe 2x_ _!child_\n\n---- #excerpt ----\n\nCreating an open Web where anyone can put anything on the Internet is the future.\n"},{"path":"/about.md","text":"---- /about ----\nname: About me\n\n## Jürgen Leschner\n\n[@jldec](https://twitter.com/jldec) |\n[github](https://github.com/jldec?tab=repositories) |\n[linkedin](https://www.linkedin.com/in/jldec)\n\n#### Current Favorite\n\n- Physicist: [Andrea Ghez](https://en.wikipedia.org/wiki/Andrea_M._Ghez)\n- Podcast: [Fest & Flauschig](https://open.spotify.com/show/1OLcQdw2PFDPG1jo3s0wbp)\n- Web platform: [Cloudflare Workers](https://workers.cloudflare.com/)\n- UI framework: [Svelte](https://svelte.dev/examples#hello-world)\n\n#### Work Sampling\n\n- word processor: MIT course 6.170 project (CLU) - 1984\n- touchscreen + videodisc authoring: MIT Media Lab (Logo, MagicL) - 1986\n- word processor: MS Word for DOS (x86 ASM and pCode, SNOBOL4) - 1987\n- word processor: MS Word for Windows v1.0a (C++) - 1990\n- database application: POINT (Novell Btrieve) - 1992\n- publishing application: IBM PC Catalog (LotusScript, FrameMaker) - 1995\n- my first commercial [website](https://web.archive.org/web/19961222064651/https://www.fmctraining.com/) - 1996\n- web publishing: Siebel Interactive briefings (HTML & tSQL) - 1998\n- dynamic html front end: Collego Catalog UI - (IE4 JScript) - 1999\n- non-relational database: Collego Catalog DB - binary relations (C++) - 1999\n- same [website](https://web.archive.org/web/20011031190800/https://www.fmctraining.com/) - 2001\n- non-relational database: Monadix XML DB (C# .NET) - 2002\n- non-relational database: PiStore (C++) - 2003\n- consumer publishing app: Pi Photo (XQuery) - 2006\n- same [website](https://web.archive.org/web/20081218114833/https://www.fmctraining.com/) - 2008\n- cloud infrastructure: EMC Atmos Compute Service (Java) - 2008\n- cloud infrastructure: CloudFoundry S3 emulator (node.js) - 2011\n- markdown site generator and editor: [pub-server](https://github.com/jldec/pub-server) (node.js, javascript) - 2014\n- same [website](https://www.fmctraining.com/) - 2016\n- static site hosting: [GitHub Pages](https://pages.github.com) - 2016\n- serverless on Kubernetes: [riff](https://projectriff.io) - 2017\n\n---- #excerpt ----\n\nWork sampling\n"},{"path":"/first-steps-using-cloudflare-pages.md","text":"---- /first-steps-using-cloudflare-pages ----\ntitle: First steps using Cloudflare Pages\nimage: images/small-clouds.jpg\ndate: 2021-01-31\ntemplate: post\n\n## jldec.me\n\nMy personal blog, [jldec.me](https://jldec.me), is hosted on [Netlify](https://netlify.com). Whenever I push markdown to GitHub, Netlify runs a build and publishes the HTML.\n\nCloudflare recently [announced](https://blog.cloudflare.com/cloudflare-pages/) a similar offering called [Cloudflare Pages](https://pages.cloudflare.com/). I was lucky enough to be given access to the Beta.\n\nUnlike [Netlify](https://www.netlify.com/pricing/#features), Cloudflare Pages [does not meter](https://pages.cloudflare.com/#pricing) request traffic. This opens the door for use-cases like CDN hosting of open source [ESM modules](/migrating-from-cjs-to-esm) 🤔.\n\n## Cloudflare Pages (Beta)\n\nThis is a walkthrough of setting up [jldec.eu](https://jldec.eu), a copy of [jldec.me](https://jldec.me), on Cloudflare Pages.\n\nIf you have access to Cloudflare Pages, you will see this button when you login to Cloudflare.\n\n![Cloudflare Pages Beta button on dashboard](/images/cf-pages-beta.png)\n\nThe Pages button takes to your Pages projects -- of which there are none at first -- and a button to `Create a project`.\n\n![Pages - Create a project](/images/cf-pages-create-a-project.png)\n\n This opens the GitHub form for granting repo access to the 'Cloudflare Pages' GitHub app. (_Look for it later in your [GitHub Settings](https://github.com/settings/installations) to add more repos, or to revoke access._)\n\n![Authorize Cloudflare Pages app on GitHub](/images/cf-pages-github-app.png)\n\nBack on Cloudflare, you can choose the repo for your new Cloudflare Pages project.  \n[cloudflare-pages-test](https://github.com/jldec/cloudflare-pages-test) is a copy of my markdown source repo from [jldec.me](https://jldec.me).\n\n![Select repo for the Cloudflare Pages project](/images/cf-pages-select-repo.png)\n\nIn the configuratiom form, I provided branch name, build command, and output directory.  \nThe project name defaults to the repo name.\n\n![Configure the build command and output directory](/images/cf-pages-configure-build.png)\n\nSubmitting the form, triggers the first build and shows the log.\n\n![First build and deploy showing log](/images/cf-pages-build-log.png)\n\nThe project page also has a section for configuring custom domains. I used my own cloudflare-hosted domain [jldec.eu](https://jldec.eu). The [docs](https://developers.cloudflare.com/pages/getting-started#add-a-custom-cname-record) can be a little confusing here. My CNAME points to `cloudflare-pages-test.pages.dev` not `custom.pages.dev`.\n\n![Cloudflare Pages custom domain](/images/cf-pages-custom-domain.png)\n\nYou can visit the deployed site at [jldec.eu](https://jldec.eu). 🇪🇺  \nSubsequent commits to this GitHub [repo](https://github.com/jldec/cloudflare-pages-test) will trigger a fresh build and re-deploy.\n\n![More deployments](/images/cf-pages-deployments.png)\n\n## GitHub Pages\n\nFor comparison, I set up [jldec.uk](https://jldec.uk), another copy of [jldec.me](https://jldec.me) using [GitHub Pages](https://pages.github.com).\n\nFirst I created a new jldec.uk [repo](https://github.com/jldec/jldec.uk/) to host the GitHub Pages site. Since the output includes javascript bundles, fonts, etc., I prefer to keep it separate from the source.\n\nI pushed the first generated website to this repo manually, using the output of a local build. The empty `.nojekyll` file is important to avoid a Jekyll build on GitHub.\n\n![GitHub Pages repo](/images/gh-pages-repo.png)\n\nNext I configured GitHub Pages in the repo settings ([...looks familiar 😃](https://github.blog/2016-08-17-simpler-github-pages-publishing/))\n\n![GitHub Pages settings](/images/gh-pages-settings.png)\n\nYou can visit the deployed site at [jldec.uk](https://jldec.uk). 🇬🇧  \n\nFinally I set up [GitHub Actions](https://github.com/jldec/cloudflare-pages-test/blob/main/.github/workflows/generate.yaml) to auto-build and auto-deploy the website when the source changes. This is triggered on push, does a checkout of both repos, and commits the new generated output, only when there are actual changes.\n\n```yaml\non:\n  push:\n    branches: [ main ]\n  workflow_dispatch:\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    env:\n      JLDEC_UK: TRUE\n\n    steps:\n    - name: checkout source repo\n      uses: actions/checkout@v2\n\n    - name: checkout destination repo under ./out\n      uses: actions/checkout@v2\n      with:\n        repository: jldec/jldec.uk\n        token: ${{ secrets.GH_TOKEN }}\n        path: out\n\n    - name: generate output\n      run: |\n        npm ci\n        rm -r out/*\n        npm run generate\n        cd out\n        git config user.email \"jldec@ciaosoft.com\"\n        git config user.name \"cloudflare-pages-test generate action\"\n        git status\n        git add -A\n        if ! git diff-index --quiet HEAD ; then git commit -m 'https://github.com/jldec/cloudflare-pages-test/actions/runs/${{ github.run_id }}' && git push ; fi\n        echo done\n```\n\nPreserving the HTML site in git is useful for all kinds of reasons. E.g. here is part of a diff from a recent [commit](https://github.com/jldec/jldec.uk/commit/0efb3e73ea2de797f9201b69803c70299be05a28).\n\n![GitHub Pages diff](/images/gh-pages-diff.png)\n\n## Conclusions\n\nThe developer experience of hosting a site with CloudFlare Pages is very similar to Netlify.\n\nThe Cloudflare Pages Beta does not yet support redirects and functions, but those are expected with the integration of [Cloudflare Workers](https://workers.cloudflare.com).\n\nAutomating builds and deploys onto GitHub Pages is more work, and requires knowledge of GitHub Actions if you're not using Jekyll. There are other gotchas with GitHub Actions if you want to support concurrent builds or preview builds.\n\n> The performance of all 3 platforms is excellent since they all serve static files from a CDN  \n> 🏃‍♀️\n\n\n_To leave a comment  \nplease visit [dev.to/jldec](https://dev.to/jldec/first-steps-using-cloudflare-pages-40gp)_\n\n---- #excerpt ----\n\nThis is a walkthrough of my first Cloudflare Pages (Beta) site, and a comparison with GitHub Pages.\n\n\n"},{"path":"/forays-from-node-to-rust.md","text":"---- /forays-from-node-to-rust ----\ntitle: Forays from Node to Rust\nimage: images/fog.jpg\ndate: 2021-01-10\ntemplate: post\n\n## Why Rust?\n\nA couple of years ago I picked up the excellent [Programming Rust](https://www.oreilly.com/library/view/programming-rust/9781491927274/) book.\n\nReading how the Rust compiler enforces memory safety and avoids data-races reminded me of the AHA! moment, when I learned how [Node.js](https://nodejs.org/en/about/) makes concurrency accessible to JavaScript developers, without the synchronization headaches of multi-threaded servers.\n\nBut there's more. Rust programs have a very minimal runtime - no garbage collector or class loader. This makes Rust ideal for constrained environments like embedded systems or edge compute platforms - so watch [this](https://github.com/oxidecomputer) [space](https://github.com/bytecodealliance).\n\n## First impressions\n\nThis article covers the experience of buiding my first Rust crate.\n\nThe [shortscale-rs](https://github.com/jldec/shortscale-rs) library tries to replicate [shortscale](https://github.com/jldec/shortscale), a small JavaScript module with just one function which converts numbers to English words.\n\nThe [Rust ecosystem](https://www.rust-lang.org) has produced an absolutely awesome array of tools and documentation.\n\nTo get started:\n- Install Rust [using rustup](https://www.rust-lang.org/tools/install).\n- Run 'rustup update' whenever there is a new [Rust release](https://github.com/rust-lang/rust/releases).\n\nThose steps also take care of 'cargo', the Rust build tool.\n\n![Image showing cargo commands](/images/cargo.png)  \n_https://www.rust-lang.org/learn/get-started_\n\n## VS Code\n\nI followed the [recommendations](https://jason-williams.co.uk/debugging-rust-in-vscode) of Jason Williams to install [Rust Analyzer](https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer) for VS Code instead of the default Rust extension. You'll also need [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb) for debugging.\n\n![VS Code showing Rust program](/images/vs-code-rust.png)  \nI particularly like the ability to run doctests directly in the VS Code terminal.\n\n## Rust String and str\n\nIn **JavaScript** building strings is straightforward. Simply use `+` to concatenate any string to any other string. Empty strings being [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) helps to write very compact logic.\n\nThe example below from [shortscale.js](https://github.com/jldec/shortscale/blob/main/shortscale.js#L96) behaves like the built-in [Array.join](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join), except that it avoids repeating separators by ignoring empty strings.\n\n```js\n// concatenate array of strings, separated by sep, ignoring '' values\nfunction concat(strings, sep) {\n  return strings.reduce((s1, s2) => s1 + (s1 && s2 ? sep : '') + s2, '')\n}\n```\n\nHere's my [first attempt](https://github.com/jldec/shortscale-rs/blob/main/src/extra.rs#L374) to do something similar in **Rust**.\n\n```rust\ntype Strvec = Vec<&'static str>;\n\n// concatenate 2 Strvec's, separated with \"and\" if both have length\nfn concat_and(v1: Strvec, v2: Strvec) -> Strvec {\n    match (v1.len(), v2.len()) {\n        (_, 0) => v1,\n        (0, _) => v2,\n        (_, _) => [v1, vec![\"and\"], v2].concat(),\n    }\n}\n```\n\n'Why Strvec?', you might ask. In Rust, the primitive string type, used for string literals, is a [str](https://doc.rust-lang.org/nightly/std/primitive.str.html). My first thought was that shortscale-rs should manipulate collections of str's. So, instead of using [String](https://doc.rust-lang.org/nightly/std/string/struct.String.html) concatenation, I put str's into [Vec](https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html)'s.\n\nNotice the elegant [match](https://doc.rust-lang.org/rust-by-example/flow_control/match.html) syntax - one of my favorite Rust language features. The compiler ensures that the 'arms' of the match cover all possible inputs. The result is both readable and concise. The '_' is shorthand for any value.\n\n> Performance does not matter,  \n> until it absolutely does.  \n> [@matteocollina](https://twitter.com/matteocollina/status/1260887018617352192?s=20)\n\n## Benchmarks\n\nThe measured [performance](https://github.com/jldec/shortscale-rs#extra) was, well, an eye-opener! ~4459ns per [shortscale_vec_concat](https://docs.rs/shortscale/1.3.2/src/shortscale/extra.rs.html#314-336) call in Rust, compared to ~1342ns for the equivalent in Node.js.\n\n[cargo bench](https://github.com/jldec/shortscale-rs/blob/main/benches/bench-shortscale.rs)\n```\nshortscale                          251 ns/iter (+/- 18)\nshortscale_string_writer_no_alloc   191 ns/iter (+/- 11)\nshortscale_str_push                 247 ns/iter (+/- 22)\nshortscale_vec_push                 363 ns/iter (+/- 26)\nshortscale_display_no_alloc         498 ns/iter (+/- 21)\nshortscale_vec_concat              4459 ns/iter (+/- 344)\nshortscale_string_join             5549 ns/iter (+/- 378)\n```\n\n[npm run bench](https://github.com/jldec/shortscale/blob/main/test/bench.js)\n```\nshortscale                         1342 ns/iter\n```\n\nClearly the v8 JavaScript engine in Node.js is working very hard to make string manipulation efficient.\n\n## Learn & Iterate\n\nThe next thing I tried was to replace the Vec collections with simple Strings, creating and returning those from each function in the Rust program. This is [shortscale_string_join](https://docs.rs/shortscale/1.3.2/src/shortscale/extra.rs.html#389-406). You should see from the benchmark, that its performance was _even worse_. Clearly I was doing something wrong.\n\nFast forward to the [current implementation](https://docs.rs/shortscale/1.3.2/src/shortscale/shortscale.rs.html#46-61), which mutates a pre-allocated String rather than calling functions which create and return new Strings.\n\n> The result is significantly faster than JavaScript.\n\nI still have a lot to learn, but this exercise was a great way to start building an intuition for Rust development and the performance of Rust primitives.\n\n> _!cogs 3x_\n\n> To leave a comment please visit  \n> [dev.to/jldec](https://dev.to/jldec/forays-from-node-to-rust-3fk1)\n\n---- #excerpt ----\n\nThis article covers the experience of buiding my first Rust crate.\n\n"},{"path":"/github-actions-101.md","text":"---- /github-actions-101 ----\ntitle: GitHub Actions 101\nimage: images/snowy-boathouse.jpg\ndate: 2020-11-27\ntemplate: post\n\n# How do GitHub Actions work?\n\nToday I was feeling a bit lost (again, sigh) trying to understand GitHub Actions.\n\nSpecifically, the [documentation](https://docs.github.com/en/free-pro-team@latest/actions) did not appear to have an overview of how actions are composed and what they are composed of. What are those things that run? How are they named and referenced?\n\nIn retrospect, instead of the docs, I would recommend getting started by looking at the yaml for the [Simple workflow](https://github.com/actions/starter-workflows/blob/main/ci/blank.yml). The button appears in the __Actions__ tab on any new repo.\n\n![Screenshot of GitHub Actions tab on new repo, showing sample workflow](/images/actions-start-here.png)\n\nThe button will open the workflow yaml in an editor (it won't be committed to your repo yet).\n\n![Screenshot of Simple workflow yaml code](/images/simple-workflow.png)\n\n## Not so mysterious after all _!smile-o_\n\n> The first takeaway is that actions can be written using simple shell commands.\n\nCommands run in a shell in VMs which come preinstalled with [commonly used tools](https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md). There is no need to learn a new scripting language. You can even write your action as a shell script in a file, and invoke it from the workflow yaml.\n\nIf you want, you can package and re-use portions of a job in different workflows. These components are also called [actions](https://docs.github.com/en/actions/creating-actions) (that's where some of my initial confusion originated), _but you don't need to learn to write those yourself in order to build your own workflows_.\n\n## Don't be thrown off by the yaml\n\nEach job is identified by its key e.g. `simple-job` in the example below.  \nThe [workflow syntax](https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions) documentation denotes this as `jobs.<job-id>`.\n```yaml\non: push\njobs:\n  simple-job:\n    runs-on: ubuntu-latest\n    env:\n      HELLO: world\n    steps:\n    - run: 'echo Hello: $HELLO'\n    - run: |\n        echo node version: `node -v`\n        pwd\n```\n\n`steps:` contains a list of commands, each described by a `run:`  \n(In the earlier example above, there is also an [action](https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/about-actions), described with `uses:` instead of `run:`)\n\nThe 1st run: command above is quoted, to avoid \": \" being interpreted as a yaml map.\n\nThe 2nd run: contains 2 commands in a multi-line (indented) block using \"|\". This syntax does not require quotes, making it convenient for embedded scripts.\n\nIf you push the workflow above to a new repo on GitHub, the result should look like this:\n\n![Screenshot of workflow run showing simple-job output](/images/action1.png)\n\n### A few more things to know about [yaml](https://en.wikipedia.org/wiki/YAML)\n\n- You can test the validity of your yaml [online](https://onlineyamltools.com/convert-yaml-to-json).  \n  Seeing the JSON representation will often clear up confusion.\n- Quotes around (scalar) strings are optional, BUT there are a lot of gotchas!  \n  E.g. look out for strings with '- ' at the start, or ': ' or '#' in the middle, or ':' at the end, or strings that look like numbers or booleans.\n- Maps are usually written as `key: value` lines at the same indentation.  \n  Lists are usually written as lines with `- value`.  \n  _Or_ use `{key1: v1, key2: v2, ...}` for maps, `[v1, v2, ...]` for lists.\n- Indentation must use spaces (no tabs).\n- For more about multi-line strings see https://yaml-multiline.info/.\n\n\n> Have fun playing with GitHub Actions  \n> _!gears_\n\n\n> To leave a comment please visit  \n> [dev.to/jldec](https://dev.to/jldec/github-actions-101-pfn)\n\n---- #excerpt ----\n\nNot so mysterious after all _!smile-o spin_"},{"path":"/migrating-from-cjs-to-esm.md","text":"---- /migrating-from-cjs-to-esm ----\ntitle: Migrating from CommonJS to ESM\nimage: images/calm.jpg\ndate: 2021-01-23\ntemplate: post\n\n## Node and npm modules\n\n[Node.js](https://nodejs.org/en/docs/guides/getting-started-guide/) opened the door for developers to build performant web servers using JavaScript.\n\nThe explosion of [CommonJS](https://nodejs.org/docs/latest/api/modules.html#modules_modules_commonjs_modules) modules which followed, created a massive new ecosystem. Building a typical website today involves hundreds, if not thousands, of modules.\n\nTo publish a module, you set `module.exports` in your code, create a `package.json` file, and run `npm publish`.\n\nTo consume a module, you add a dependency to your `package.json` file, run `npm install`, and call `require('module-name')` from your code.\n\nModules can depend on other modules.\n\n[Npm](https://docs.npmjs.com/about-npm) moves module files between a central registry and the machines running Node.js.\n\n## ESM modules\n\nIn [2015](https://262.ecma-international.org/6.0/#sec-ecmascript-language-scripts-and-modules), `import` and `export` statements were added to JavaScript. ESM module loading is now a built-in feature of [all major browsers](https://caniuse.com/mdn-javascript_statements_import) (sorry IE.)\n\nESM removes the need for package.json files, and uses URLs instead of npm module names -- but it does not preclude those from being used with ESM, say in a Node.js context.\n\nTo publish an ESM module, use `export` in your code, and make the file fetchable by URL.\n\nTo consume an ESM module, use `import { ... } from URL`. See [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) for more details.\n\nUsing `import` instead of `require()` allows ESM modules to be loaded independently, without running the code where they are used. A variant of the `import` statement, is the [dynamic import()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports) function. This allows for modules to be loaded asynchronously at run-time.\n\n> ESM is the basis for exciting new developer tools like [Snowpack](https://github.com/snowpackjs/snowpack#readme) and [Vite](https://github.com/vitejs/vite#readme).\n\n## So, why are most modules still published with CommonJS?\n\nEven before ESM, developers could use npm modules in front-end code.  Tools like [browserify](https://github.com/browserify/browserify#readme) or [webpack](https://github.com/webpack/webpack#readme) bundle modules into a single script file, loadable by browsers.\n\nOn the server side, it has taken Node.js a few years to arrive at [ESM support](https://nodejs.org/api/packages.html#packages_determining_module_system). Unfortunately, the 2 standards are not fully interoperable.\n\nDespite everyone's best intentions, the [Node.js docs](https://nodejs.org/api/esm.html#esm_interoperability_with_commonjs) are unclear about what to do. For a deeper explanation, I recommend [this article](https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1) by Dan Fabulich.\n\nHere is a summary of some interop scenarios:\n\n#### require() from default Node.js context\n- require(\"CommonJS-module\") - **Yes _!check_**, this has always worked and is the default.\n- require(\"ESM-module\") - **No _!close_**.\n- require(\"Dual-ESM-CJS-module\") - **Yes _!check_**, but be careful with state.\n\n#### import statement from Node.js ESM context - E.g. in a server.mjs file.\n- import from \"ESM-module\" - **Yes _!check_**.\n- import default from \"CommonJS-module\" - **Yes _!check_**.\n- import { name } from \"CommonJS-module\" - **No _!close_**, get default.name from 2.\n\n## Dynamic Import as a fallback\nNode's inability to require() ESM modules prevents simple upgrades from CommonJS to ESM.\n\nPublishing [dual](https://nodejs.org/dist/latest-v15.x/docs/api/packages.html#packages_dual_commonjs_es_module_packages) ESM-CJS packages is messy because it involves [wrapping](https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1#6b50) CommonJS modules in ESM. Writing a module using ESM and then wrapping it for CommonJS is not possible.\n\nFortunately, [dynamic import()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports) provides an alternative.\n\nDynamic import() works from the default Node.js context as well as from an ESM context. You can even import() CJS modules. The only gotcha is that it returns a promise, so it is not a drop-in replacement for require().\n\nHere is an example showing require() and import() together.\n\nI published [shortscale](https://github.com/jldec/shortscale) v1 as CommonJS. For [v2 and later](https://github.com/jldec/shortscale/pull/2) the module is only available as ESM. This means that later releases can no longer be loaded using Node.js require().\n\nThis [fastify server](https://github.com/jldec/demo-fastify-esm) loads both module versions from a CJS context.\n\n```js\n// minimal fastify server based on:\n// https://www.fastify.io/docs/latest/Getting-Started/#your-first-server\n\nconst fastify = require('fastify')({ logger: true });\n\nfastify.register(async (fastify) => {\n  let shortscale_v1 = require('shortscale-v1');\n  let shortscale_v4 = (await import('shortscale-v4')).default;\n\n  // e.g. http://localhost:3000/shortscale-v1?n=47\n  fastify.get('/shortscale-v1', function (req, res) {\n    let num = Number(req.query.n);\n    let str = '' + shortscale_v1(num);\n    res.send({num, str});\n  });\n\n  // e.g. http://localhost:3000/shortscale-v4?n=47\n  fastify.get('/shortscale-v4', function (req, res) {\n    let num = Number(req.query.n);\n    let str = '' + shortscale_v4(num);\n    res.send({num, str});\n  });\n});\n\n// Run the server!\nfastify.listen(3000, function (err, address) {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n  fastify.log.info(`server listening on ${address}`);\n});\n```\n\nFor this demo, `package.json` installs both versions of shortscale.\n\n```json\n{\n  \"name\": \"demo-fastify-esm\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Demonstrate ESM dynamic import from non-ESM server\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"author\": \"Jurgen Leschner\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"fastify\": \"^3.11.0\",\n    \"shortscale-v1\": \"npm:shortscale@^1.1.0\",\n    \"shortscale-v4\": \"npm:shortscale@^4.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jldec/demo-fastify-esm\"\n  }\n}\n```\n\n> I plan to migrate my modules to ESM. Other [module authors](https://blog.sindresorhus.com/get-ready-for-esm-aa53530b3f77) are too.\n\n> _!cubes 3x_\n\n> To leave a comment please visit  \n> [dev.to/jldec](https://dev.to/jldec/migrating-from-commonjs-to-esm-2p24)\n\n---- #excerpt ----\n\nHow to migrate from CommonJS to EcmaScript Modules.\n\n"},{"path":"/spring-boot-101.md","text":"---- /spring-boot-101 ----\ntitle: Spring Boot 101\nimage: images/boot1.jpg\ndate: 2017-06-28\ntemplate: post\n\n# What is a Spring Bean really?\n\nToday I was feeling rather lost in my attempts to understand what is going on inside a Spring Boot application.\n\nBeing new to Spring, I had spent a fair bit of time googling and reading, but most of the things i came across simply assume prior knowledge when it comes to fundamental concepts like 'Beans'.\n\nMark Fisher, my friend and colleague here on the Spring team at Pivotal, came to my rescue and offered to explain. In exchange, I promised to write about it.\n\nThe result is this blog post and https://github.com/markfisher/spring-boot-hello-world.\n\n## In the beginning there was XML\n\nSpring started by providing a much-simpler-than-J2EE, XML-based way to configure the main classes that your Java application depended on.\n\nSimply instantiating everything with `new` in Java was not ideal because this meant that you had to hardwire all those dependencies into your code, so you couldn't easily use say one database for local testing and a different database for CI or production.  \n\nInstead of writing your own factories which abstracted the creation of things like database connections, you could use Spring and provide the details of all those things in XML.\n\nSpring would read some environment-specific XML at startup and create instances of those classes based on what was in the XML.\n\nAnd those instances were... _**Beans**_, something like this:\n\n![ApplicationContext.getBean()](/images/boot1b.jpg)\n\n## Now there are @Annotations\n\nFast forward a few years and the XML has been replaced by Java code annotated as `@Configuration` and `@ConfigurationProperties`.\n\n```java\n@Configuration\n@EnableConfigurationProperties(GreeterProperties.class)\npublic class GreeterAutoConfiguration {\n\n\t@Bean\n\tpublic Greeter greeter(GreeterProperties properties) {\n\t\treturn new Greeter(properties.getGreeting());\n\t}\n}\n```\n\n\nNotice that the factory method is annotated as `@Bean`.\n\nIf the configuration class is included in the `META-INF/spring.factories` of a dependent jar, then a Spring Boot application will automatically call the factory method to create a singleton instance of that class on startup.\n\n> This is the magic  \n> and those instances are still called **Beans**\n\n## What about [Spring Initializr](https://start.spring.io/) and all those starters?\n\nNow that [_configuration scanning_](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-configuration-classes) is no longer such a mystery, the role of Spring Boot Starters is easier to understand.\n\nBy including a starter in the dependencies of your Boot App, you are telling Spring to scan for configuration classes inside that starter, which results in the automatic creation of the **Beans** for that starter.\n\n![Initializr injection](/images/boot7.jpg)\n\n> Easy!  \n> _!lemon-o_\n\n---\n\n\n---- #excerpt ----\n\nSpring Beans are magic - but what's behind them and why are they called beans?\n"},{"path":"/why-serverless-at-the-edge.md","text":"---- /why-serverless-at-the-edge ----\ntitle: Why Serverless at the Edge?\nimage: /images/wires.jpg\ndate: 2019-07-11\ntemplate: post\n\n## Why tho?\n\nOne of the more memorable moments from today's [#ServerlessDays](https://twitter.com/ServerlessLDN) event in London was [@monkchips](https://twitter.com/monkchips)' rather emphatic pronouncement of skepticism about Serverless at the edge.\n\nIt happened right before the Keynote which was all about WebAssembly, and for which running at the edge is an important use case.\n\nSeveral speakers went on to make a strong case for technologies like WASM and WASI. \n\nThis one by Cloudflare's own [@nodebotanist](https://twitter.com/nodebotanist), was the most profound.  \n\n![@nodebotanist quote: \"The future of serverless lies in doing things in different ways. Creating new serverless architectures from the ground up and allowing users to try different strategies is a key part of any movement's maturity.\"](/images/kas-quote-2.jpg)\n\n> But what makes Serverless at the edge useful in ways that more-centralized services are not?\n\n## The edge is a trust boundary\n\nI think it's helpful to understand the edge as the boundary where the wild Internet first touches something with a DNS name and an SSL certificate. \n\nThis boundary is where, as a first order of business, we have a chance to protect Web properties from intruders and DDOS attacks ... a capability which remains Cloudflare's raison d'être today.\n\n> Shouldn't this trust boundary be available to everyone?\n\nProviding public websites with protection is a valuable service, but what if we could do something similar (at the edge) to provide regular people with the means to communicate and collaborate in private.\n\nSharing photos with friends and relatives should be as simple as choosing a DNS name, and installing software that you trust at the edge where your DNS name meets the Internet. \n\nThis software will give you control over who gets to see your photos, and your relatives will be able to visit without surveillance or ads.\n\nPhotos are just one example. Sharing documents, sharing code, sharing work ... communicating privately is fundamental to our lives and to our economy.\n\n> Serverless at the edge has the potential to make the Web great again, for all of us.  \n>\n> _!globe 2x_\n\n---- #excerpt ----\n\nWhat makes Serverless at the edge useful in ways that more-centralized cloud services are not?\n"},{"path":"/why-the-web-needs-better-html-editing-components.md","text":"---- /why-the-web-needs-better-html-editing-components ----\ntitle: Why the Web needs better HTML editing components\nimage: /images/bridge.jpg\ndate: 2015-08-13\ntemplate: post\n\nYesterday I made a small contribution to help [**ProseMirror**](https://www.indiegogo.com/projects/prosemirror/#/story). Here's why.\n\n## HTML is awesome\n\nHTML has evolved into the de-facto rendering language for displays, and it just keeps getting better. Fonts, animations, sophisticated text layout, international character sets, vector images, high-resolution photos and video, the list goes on and on.\n\nThere's little doubt in 2015 that HTML has become **the** way to publish online.\n\n\n## People are still writing with tools designed for print\n\nThere must be good reasons why people are still using the old desktop editors, they're not exactly fun or easy to use.\n\nSome of it has to do with inertia, and proprietary formats, and interoperability. How else can you work together on a document if you can't share and open each other's files?\n\n\n## But let's be honest\n\nHTML, and it's siblings like CSS, with all their power and sophistication, have become so complex, that they are impossible to edit by anyone except experts. So, what's the answer?\n\n> How do people write and publish content in HTML?\n\n\n## Silos are not the solution\n\nHiding the complexity of creating and publishing HTML online is a _necessary_ service: But let's not fall into the trap of assuming that [website-hosting providers](https://www.squarespace.com/) and [commercial online publishers](https://medium.com/) are the only legitimate providers of this service. David Winer has [written](http://myword.io/users/davewiner/essays/051.html) about this.\n\n\n## We need *simple* personal publishing tools\n\n1. Write your story\n2. Illustrate it with a photo or two\n3. Publish it in beautifully designed HTML for others to enjoy\n\nClearly there are some missing pieces. One of those is **easier private web hosting**, but that's a topic for another blog post.\n\n> How do people write in HTML?\n\n\n## It's the Software, stupid\n\nWe know it takes experts to design beautiful HTML. So we need software to help the rest of us pour our stories into those HTML designs. It's a bit like sending a document to the printer, except that software can do it instantly, generating HTML for us, every keystroke we type.\n\nThis is where ProseMirror comes in. It will make editing HTML *feel* like [wysiwyg](https://en.wikipedia.org/wiki/WYSIWYG) even though the HTML we're editing is not our own. HTML will come from templates carefully crafted by  designers.\n\nEditing with these HTML templates will produce two separate things:\n\n1. HTML output, ready for publishing\n2. The stuff we write\n\n\n## And where do we store the stuff we write?\n\nI think the software community has the best answer to this question. Most of the code which powers our lives, lives in human-readable text files. These, in turn, live in services like [GitHub](https://github.com/jldec/) where we can track changes and collaborate on content together.\n\nLet's build [tools to do the same](https://jldec.github.io/pub-doc/how-it-works) for the stuff we write.\n\n\n> Thank You\n\n---\n\n---- #excerpt ----\n\nHTML, and it's siblings like CSS, with all their power and sophistication, have become so complex, that they are impossible to edit by anyone except experts. So, what's the answer?\n\nHow do people write and publish content in HTML?\n"}]},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog/templates","_pkg":"pub-theme-pubblog","name":"templates","type":"FILE","watch":false,"files":[{"path":"/default.hbs","text":"{{{html}}}\n"},{"path":"/doc-layout.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n{{{metaSeo}}}\n\n<!-- html generated by pub-server from markdown {{_file.path}} -->\n\n<title>{{title}}</title>\n{{{injectCss}}}\n<!--[if lt IE 9]>\n<script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n<script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n<![endif]-->\n</head>\n<body>\n\n{{{renderLayout}}}\n\n{{{injectJs}}}\n{{{comment \"copyright\"}}}\n</body>\n</html>\n"},{"path":"/home.hbs","text":"{{#eachPost~}}\n<div class='postentry'>\n{{{permaLink}}}\n<h2>{{{pageLink}}}</h2>\n<div class=\"date\">{{date}}</div>\n{{{fragmentHtml [#excerpt]}}}\n</div>\n{{/eachPost}}\n"},{"path":"/main-layout.hbs","text":"<header>\n<div id=\"doctitle\">{{{docTitle}}}</div>\n<div id=\"topmenu\">{{{topMenu}}}</div>\n</header>\n\n<div id=\"navicon\" onclick=\"\">{{{navIcon}}}\n<nav id=\"toc\">\n<ul>\n<li><strong>{{{linkTo '/' 'Home'}}}</strong></li>\n{{#eachPost~}}\n<li>{{{pageLink}}}</li>\n{{/eachPost~}}\n</ul>\n</nav>\n</div>\n\n<div id=\"title\" {{{title-style}}}>\n  <div class=\"title\">{{title}}</div>\n  <div class=\"subtitle\">{{subtitle}}</div>\n</div>\n\n<div id=\"main\" onclick=\"\">\n<div id=\"content\">\n\n{{{renderPage}}}\n\n<div id=\"credit\">{{{credit}}}</div>\n\n</div>\n</div>\n"},{"path":"/post.hbs","text":"<span class=\"permalink\">{{{permaLink}}}</span><span class=\"date\">{{date}}</span>\n\n<div {{{style}}}>\n{{{html}}}\n</div>\n\n{{#eachFragment '#post'}}\n<div {{{style}}}>\n{{{html}}}\n</div>\n{{/eachFragment}}\n"}]},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-seo/src","fragmentDelim":1,"_pkg":"pub-pkg-seo","name":"src","type":"FILE","watch":false,"files":[{"path":"/pages","text":"---- /robots.txt ----\nnocrawl:1\nnolayout:1\ntemplate:robots.txt\naccess:everyone\n\n---- /sitemap.xml ----\nnocrawl:1\nnolayout:1\ntemplate:sitemap.xml\naccess:everyone\n"},{"path":"/robots.txt.hbs","text":"user-agent: *\n{{#ifOption 'noRobots'}}\ndisallow: /\n{{else}}\nallow: /\n{{/ifOption}}\n"},{"path":"/sitemap.xml.hbs","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n{{#eachPage~}}\n<url><loc>{{fqurl}}</loc></url>\n{{/eachPage}}\n</urlset>\n"}]},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-editor/src","writable":true,"_pkg":"pub-pkg-editor","name":"_src","type":"FILE","tmp":"tmp/_src","watch":false,"fragmentDelim":true,"files":[{"path":"/pub-editor-doclayout.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>pub {{name}}</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/css/editor.css\">\n</head>\n<body>\n{{{renderPage}}}\n<script src=\"{{relPath}}/js/jquery-1.12.4.min.js\"></script>\n</body>\n</html>\n"},{"path":"/pub-editor-help.md","text":"---- /pub-editor-help ----\nname: pub Editor\ndoclayout: pub-editor-doclayout\nnopublish: 1\n\n\n## Editing pages with pub server\n\n- **try it out!**  -- you can [edit this page](/pub/editor-help).\n\n- Click on the (E) button (ony visible for Editors) at the top right on the staging server, to open any page for editing in Composer.\n\n- Once open, the (E) changes to an (C) which closes the Composer and returns to normal staging website navigation.\n\n- In composer mode, there are two panes.  \n  The markdown editor on the left  \n  And the preview pane on the right\n\n- You can drag the little round dragger at top of the line separating the panes left and right. Your settings will be remembered across sessions.\n\n- The preview pane can be used to navigate the website, select other pages for editing, and display, in real-time, any changes you make in the editor on the left.\n\n- The website in the preview pane should look and behave just like the normal (staging) website. Click on links to navigate, and even use your browser's back button. The only exceptions are pages which require information from the server e.g. the thank-you pages after submitting a registration or an info request.\n\n- The composer can also be opened by prepending `pub/` to the beginning of the path in the url. E.g. to open this page in composer, go to [/pub/editor-help](/pub/editor-help)\n\n- sometimes if the network is slow, the composer won't work the first time -- navigating to another page by clicking somewhere in the preview should fix it.\n\n## Modifying pages\n\n- click on the editor button (E) at the top right, and wait a second or two for the markdown to appear in the left pane.\n\n- the header section at the top of the markdown in the left pane contains \"meta\" information like (most importantly) the `page:` which is the url path to the page, and the `template:` which defines the type of page.\n\n- below the header section is the \"main\" markdown content for the page.\n\n- edit away..., You should see your changes immediately reflected in the preview pane on the right.\n\n- All changes are saved automatically to the server (no need to click on any save button) but nothing is published to the www website. \n\n- Click on the close button (C) at the top right, to close the composer, and see the change on the staging site.\n\n## Committing changes\n\n- At any time you can click on the ✓ (check symbol) at the top of the left pane.\n\n- you should see a list of all the updated pages or fragments which have not yet been committed.\n\n- Hovering over any one of the updates in the list should show you a bit of what changed (in case you forgot).\n\n- Clicking on one of the updates in the list will present a confirmation prompt. Click on OK to commit or Cancel to go back without comitting.\n\n- Once you commit, it will take a few minutes for the main www server to refresh its pages with those changes (right now the interval is set to 5 min).\n\n## Modifying fragments\n\n- Content like the banner ads, and the bio's on the location pages and the staff page, lives in \"fragments\". These have a `fragment:#fragment-name` header instead of a `page:path` header.\n\n- to edit this, navigate to the page, then click on the **✍** fragment selection pointer (little hand) at the top right and then click anywhere inside the fragment that you want to edit in the preview pane on the right. The markdown for the selected fragment should appear on the left.\n\n## Adding or removing pages\n\n- Contact your web admin for help adding new pages, or changing page urls.\n\n## Uploading images\n\n- For best results, images should be sized at 2x the desired pixel width and height and then given explicit width and height dimensions (1/2 of the actual) when inserted. See [composer markdown extensions](#composer-markdown-extensions)  below for more details\n\n- To upload an image, click on the ☰ button at the top left. This will open a little uploader form which you can browse your file system for the image that you want to upload (drag and drop not supported yet sorry). After uploading you should see the image below the form together with a markdown snippet for the image, and the image URL.\n\n- The uploader will rename the image file with just lowercase and hyphens, but please use meaningful file names for your images before uploading them, so that someone looking at all the image files, can recognize what it is.\n\n- Usually you will copy the markdown snippet and paste it somewhere into the markdown editor. Note that inside markdown, you don't need the fully qualified image source url, just start the image url or link with `/images/...`\n\n# Markdown\n\nEditor supports [github flavored markdown](https://help.github.com/articles/github-flavored-markdown/).\n\n### Paragraphs and line breaks\nSimply leave a blank line between paragraphs. To force a line break put 2 spaces at the end.  \nlike so.  \ndone.\n\n### links and images\n\nIn general links have the form `[text](url \"title\")`\n\nLinks within the website don't require any [text] if the page has a name e.g. `[](/contact-fmc)` will become [](/contact-fmc).\n\nAlso, if the url starts with http:// or https:// and you want to show the url in the resulting page, you can just include it inline in the text without wrapping it in `[]()`\n\nMarkdown for images looks just like markdown for links with a `!` in front  \nE.g. `![jurgen's kids a few years ago](/images/gmail-logo-1.gif)`  \n![jurgen's kids a few years ago](/images/gmail-logo-1.gif)\n\nIf you want an image which links to another page, you put the image markdown inside the text part of the link markdown like this.  \n`[![Image](image-src)](link-url)`\n\n### Editor markdown extensions\nMost of these extensions work by recognising patterns in the `[]( \"title\")` part of the link markdown i.e the part in `\"\"` after the url.\n\n- Use `^` to force a link to open in a new window E.g. `[](/help \"^\")` [](/help \"^\")\n\n- Note: \"Fully qualified\" links (which include `https://servername/...`) automatically open in a new tab/window. E.g.  \n`[google](https://www.google.com)` opens a new window on\n[google](https://www.google.com)\n\n- The link title part of the image markdown can be used for `WxH` sizing or `name=value` attributes. E.g.  \n`\"align=right\"` ![](/images/gmail-logo-1.gif \"align=right\")  \n`\"width=32\"` ![](/images/gmail-logo-1.gif \"width=32\")  \n`\"12x12\" `![](/images/gmail-logo-1.gif \"12x12\")\n\n### Markdown inline formatting\n- **BOLD**\n- *ITALIC*\n- ***BOLD AND ITALIC***\n- ~~STRIKE-THRU~~\n- `quoted-text with <> tags`\n\n\n    quoted\n    paragraph\n    spanning multiple lines\n\n\n# h1 level heading\n## h2 level heading\n### h3 level heading\n#### h4 level heading\n\n### lists\n\n- bullet list\n- bullet list\n  - sub-bullet\n  - sub-bullet\n    - sub-sub-bullet\n    - sub-sub-bullet\n\n\n1. numbered list\n   1. sub-point\n   2. sub-point\n    3. sub-sub-point\n2. numbered list\n3. numbered list\n\n* * * \nUse `* * *` on a separate line for horizontal rules \n\n---\n\n### tables\n\nGFM tables use `|` to separate columns\n\n    | Left-Aligned  | Center Aligned  | Right Aligned |\n    | :------------ |:---------------:| -----:|\n    | col 3 is      | some wordy text | $1600 |\n    | col 2 is      | centered        |   $12 |\n    | zebra stripes | are neat        |    $1 |\n\nbecomes...\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n...\n---\n\nHere's a [Markdown cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) with more information about things like tables.\n\nAnd here's some [more background](/help/markdown-motivation) on the motivations behind markdown\n\n![](/images/2016-05-07-13.43.19.jpg \"width=100\")\n"},{"path":"/pub-editor-updates.hbs","text":"<div class=\"editorupdates\">\n<h3>{{name}}</h3>\n<ul class=\"difflist\">\n{{#each diffs}}\n<li title=\"Click to open in editor.{{difftext}}\" data-file=\"{{file}}\" data-href=\"{{diffpage}}\" class=\"difflistitem\">\n  <span class=\"diffrevert\" title=\"Click to revert changes (will trigger editor reload.)\">𐄂</span>\n  <span class=\"diffcommit\" title=\"Click to commit and publish changes.\">✔︎</span>\n  {{difffragments}}\n</li>\n{{/each}}\n</ul>\n</div>\n"},{"path":"/pub-editor-upload.hbs","text":"<div class=\"upload\">\n<h3>{{name}}</h3>\n<form method=\"POST\" enctype=\"multipart/form-data\" action=\"/admin/pub-editor-upload\">\n{{{html}}}\n</form>\n{{#eachUpload}}<pre>![](/images/{{{name}}}){{s3Err}}\n</pre>\n<img src=\"{{opts 'fqImages'}}/images/{{name}}\"><br>\n{{opts 'fqImages'}}/images/{{name}}\n{{/eachUpload}}\n</div>\n"},{"path":"/pub-editor.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>pub editor</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/css/editor.css\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/humane-js/flatty.css\">\n</head>\n<body>\n<div class=\"handle leftright\"></div>\n\n<div class=\"outer col\">\n\n<div class=\"header row\">\n  <div class=\"menubutton col clickable\" title=\"upload images\"> ☰ </div>\n  <div class=\"commitbutton col clickable\" title=\"List changes and commit\"> ✔︎ </div>\n  <div class=\"name col\"></div>\n  <div class=\"editbutton col clickable\" title=\"fragments\"> ✍ </div>\n  <div class=\"helpbutton col clickable\" title=\"help\"> ? </div>\n</div>\n\n<div class=\"main row\">\n  <div class=\"editorpane left col\">\n    <div class=\"updateslist row shadow\"></div>\n    <iframe class=\"uploadsform row shadow\" src=\"{{relPath}}/admin/pub-editor-upload\"></iframe>\n    <textarea class=\"editor row\"></textarea></div>\n  <div class=\"previewpane right col\"><iframe class=\"preview\" src=\"{{relPath}}{{route}}\"></iframe></div>\n</div>\n\n</div>\n<script>window.pubRef = {\"href\":\"{{editorPrefix}}/\",\"relPath\":\"{{relPath}}\"};</script>\n<script src=\"{{relPath}}/js/jquery-1.12.4.min.js\"></script>\n<script src=\"{{relPath}}/pub/js/editor-ui.js\"></script>\n<script src=\"{{relPath}}/pub/_generator.js\"></script>\n\n</body>\n</html>\n"},{"path":"/pub-editor.md","text":"---- /pub/ ----\nname: pub-server\ndoclayout: pub-editor\nnocrawl: 1\n\n\n---- /admin/pub-editor-upload ----\nname: Upload Images\ntemplate: pub-editor-upload\ndoclayout: pub-editor-doclayout\npostandget: 1\nnocrawl: 1\n\n[?file?](upload)\n[?submit? Upload](-)  \n[Markdown will appear below. ?label?](- \"instructions\")\n"}]}],"staticPaths":[{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/images","route":"/images","watch":{}},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/favicon.ico","watch":{}},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/CNAME","watch":{}},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/.nojekyll","watch":{}},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/cloudflare-pages-test-log-1.txt","watch":{}},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-jquery/js/jquery-1.12.4.min.js","route":"/js","inject":true,"maxAge":"30d","_pkg":"pub-pkg-jquery","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog/css/pubblog.css","route":"/css","inject":true,"_pkg":"pub-theme-pubblog","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog/images/default.jpg","route":"/images","_pkg":"pub-theme-pubblog","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-open-sans/open-sans.css","route":"/css","inject":true,"_pkg":"pub-pkg-font-open-sans","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/open-sans-fontface/fonts","route":"/css/fonts","glob":"**/*.{eot,woff,woff2}","maxAge":"1000d","_pkg":"pub-pkg-font-open-sans","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-awesome/fonts","route":"/fonts","_pkg":"pub-pkg-font-awesome","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-awesome/css/font-awesome.css","route":"/css","inject":true,"_pkg":"pub-pkg-font-awesome","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-highlight/css/highlight-9.18.1-github.css","route":"/css","inject":true,"maxAge":"30d","_pkg":"pub-pkg-highlight","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-highlight/js/highlight-9.18.1.min.js","route":"/js","inject":true,"maxAge":"30d","_pkg":"pub-pkg-highlight","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-highlight/js/pub-pkg-highlight.js","route":"/js","inject":true,"maxAge":"30d","_pkg":"pub-pkg-highlight","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-editor/static/css","route":"/pub/css","_pkg":"pub-pkg-editor","watch":false},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/humane-js/themes/flatty.css","route":"/pub/humane-js","_pkg":"pub-pkg-editor","watch":false}],"outputs":[{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/out","relPaths":true,"name":"out","output":true,"writable":true,"type":"FILE","tmp":"tmp/out","watch":{}}],"browserScripts":[{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-editor/client/editor-ui.js","route":"/pub/js/editor-ui.js","_pkg":"pub-pkg-editor"},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-preview/pub-preview.js","route":"/pub/js/pub-preview.js","_pkg":"pub-pkg-editor"}],"generatorPlugins":[{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-editor/generator-plugin.js","_pkg":"pub-pkg-editor"},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-seo/generator-plugin.js","_pkg":"pub-pkg-seo"},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-awesome/generator-plugin.js","_pkg":"pub-pkg-font-awesome"},{"path":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog/plugins/generator-plugin.js","_pkg":"pub-theme-pubblog"}],"serverPlugins":[],"injectCss":[{"path":"/css/pubblog.css"},{"path":"/css/open-sans.css"},{"path":"/css/font-awesome.css"},{"path":"/css/highlight-9.18.1-github.css"}],"injectJs":[{"path":"/js/jquery-1.12.4.min.js"},{"path":"/js/highlight-9.18.1.min.js"},{"path":"/js/pub-pkg-highlight.js"},{"path":"/pub/pub-ux.js"}],"pkgs":[{"path":"pub-pkg-jquery","pkgJson":{"name":"pub-pkg-jquery","version":"1.12.4","description":"pub-server package to inject jQuery","main":"pub-config.js","dependencies":{},"keywords":["publish","jquery"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-jquery.git"},"author":"jurgen leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-pkg-jquery/-/pub-pkg-jquery-1.12.4.tgz","_integrity":"sha512-OJIVVTReAK65gmYThjsFacqUTZPeNDpjKu6JAoWeZ3HIYf9J3oo9LC07izUeW36fqfkQXWtaT4bm4bplfpyxIQ==","_from":"pub-pkg-jquery@1.12.4"},"pkgName":"pub-pkg-jquery","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-jquery"},{"path":"pub-theme-pubblog","pkgJson":{"name":"pub-theme-pubblog","version":"1.2.10","description":"pub-server blogging theme","main":"pub-config.js","dependencies":{},"files":["css/","plugins/","templates/","images/","pub-config.js"],"keywords":["publish","markdown","pubblog"],"repository":{"type":"git","url":"git://github.com/jldec/pub-theme-pubblog.git"},"author":"Jürgen Leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-theme-pubblog/-/pub-theme-pubblog-1.2.10.tgz","_integrity":"sha512-i6LhPdOT6+E497lpskXTw/jsIbUiVYpTY4NsycWPvhORWohL8vNy4S66Q2AYSvWZJ/6OPkoRSSnPRglSDUbgzQ==","_from":"pub-theme-pubblog@1.2.10"},"pkgName":"pub-theme-pubblog","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog"},{"path":"pub-pkg-font-open-sans","pkgJson":{"name":"pub-pkg-font-open-sans","version":"1.5.1","description":"pub-server package for publishing with the Open Sans font","main":"pub-config.js","dependencies":{"open-sans-fontface":"^1.4.0"},"devDependencies":{"pub-pkg-show-font":"^1.1.1"},"files":["pub-config.js","open-sans.css"],"keywords":["pub-server","publish","markdown","font","open-sans"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-font-open-sans.git"},"scripts":{},"author":"Jürgen Leschner","license":"MIT AND Apache-2.0","_resolved":"https://registry.npmjs.org/pub-pkg-font-open-sans/-/pub-pkg-font-open-sans-1.5.1.tgz","_integrity":"sha512-f9q/kYa4nU7yeV5SfrkLZhgo/GbVB75y3N9d2TP6nhTD9OK2cpinu6ClO0LKTY8v7MyNafM0qCDtV1tXC5cf3w==","_from":"pub-pkg-font-open-sans@1.5.1"},"pkgName":"pub-pkg-font-open-sans","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-open-sans"},{"path":"pub-pkg-font-awesome","pkgJson":{"name":"pub-pkg-font-awesome","version":"3.0.4","description":"Use Font Awesome v4.7.0 glyphs from pub-server markdown","main":"pub-config.js","dependencies":{},"devDependencies":{},"files":["css/","fonts/","pub-config.js","generator-plugin.js"],"keywords":["publish","markdown","icon","font","awesome"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-font-awesome.git"},"scripts":{"readme":"pub","docedit":"pub docs-src","docout":"pub -O docs-src","docview":"pub -S docs"},"author":"Font Awesome by Dave Gandy - http://fontawesome.io","license":"MIT AND OFL-1.1","_resolved":"https://registry.npmjs.org/pub-pkg-font-awesome/-/pub-pkg-font-awesome-3.0.4.tgz","_integrity":"sha512-kRoZPaHnXFLPYLQbszUKj8zFQEEaSlve6+sDnPzlYgC8Hby7O5NVSdNzhn8YDcpksG0lHsvSoNjSGEZ5vM7F2w==","_from":"pub-pkg-font-awesome@3.0.4"},"pkgName":"pub-pkg-font-awesome","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-font-awesome"},{"path":"pub-pkg-seo","pkgJson":{"name":"pub-pkg-seo","version":"1.0.16","description":"pub-server package for generating robots.txt and sitemap.xml","main":"pub-config.js","dependencies":{},"devDependencies":{"eslint":"^7.13.0","pub-generator":"^4.1.1","pub-resolve-opts":"^1.9.2","pub-src-fs":"^2.1.2","tape":"^5.0.1"},"files":["pub-config.js","generator-plugin.js","src/"],"keywords":["publish","seo","robots","sitemap"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-seo.git"},"scripts":{"test":"eslint . && tape test/norobots/norobots.test.js && tape test/yesrobots/yesrobots.test.js "},"author":"Jürgen Leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-pkg-seo/-/pub-pkg-seo-1.0.16.tgz","_integrity":"sha512-4Xk2mzNo+/JE8dpudpO0CeV9NbRrlz/FmgZPmSOYDkkNSiaYv3T2j3cOLzHx3HBA5BCeDt8RSsu33Gn2IZ5tRQ==","_from":"pub-pkg-seo@1.0.16"},"pkgName":"pub-pkg-seo","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-seo"},{"path":"pub-pkg-highlight","pkgJson":{"name":"pub-pkg-highlight","version":"9.18.1","description":"pub-server package for injecting highlight.js","main":"pub-config.js","dependencies":{},"files":["css/","js/","pub-config.js","LICENSE-HIGHLIGHT"],"keywords":["publish","syntax","highlight"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-highlight.git"},"author":"Jürgen Leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-pkg-highlight/-/pub-pkg-highlight-9.18.1.tgz","_integrity":"sha512-e+cZm28QtCTrxk2kfzs8oaWQQJTHPk2q83jie9xrJvtmSiybIBs7GbtpRHVMOJYJMxO6aa6Q65/69DvY2QqZAg==","_from":"pub-pkg-highlight@9.18.1"},"pkgName":"pub-pkg-highlight","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-highlight"},{"path":"pub-pkg-editor","pkgJson":{"name":"pub-pkg-editor","version":"2.0.3","description":"simple markdown editor for pub-server","main":"pub-config.js","dependencies":{"humane-js":"^3.2.2","pub-preview":"^1.3.7"},"devDependencies":{},"files":["client/","src/","static/","pub-config.js","generator-plugin.js"],"repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-editor.git"},"author":"Jürgen Leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-pkg-editor/-/pub-pkg-editor-2.0.3.tgz","_integrity":"sha512-1vvJQ1nCkdaxIeSr+KUKyXLmF4BB5s2Notv7ncz/9BIToay9dASpQJH0OZFCUvZnagFOHwW8dArm3iN0lZbVIA==","_from":"pub-pkg-editor@2.0.3"},"pkgName":"pub-pkg-editor","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-pkg-editor"}],"docTitle":"jldec.uk","appUrl":"https://jldec.uk","noRobots":true,"throttleReload":"1s","linkNewWindow":true,"tmp":"./tmp","github":"https://github.com/jldec/cloudflare-pages-test","editorPrefix":"/pub","theme":{"path":"pub-theme-pubblog","pkgJson":{"name":"pub-theme-pubblog","version":"1.2.10","description":"pub-server blogging theme","main":"pub-config.js","dependencies":{},"files":["css/","plugins/","templates/","images/","pub-config.js"],"keywords":["publish","markdown","pubblog"],"repository":{"type":"git","url":"git://github.com/jldec/pub-theme-pubblog.git"},"author":"Jürgen Leschner","license":"MIT","_resolved":"https://registry.npmjs.org/pub-theme-pubblog/-/pub-theme-pubblog-1.2.10.tgz","_integrity":"sha512-i6LhPdOT6+E497lpskXTw/jsIbUiVYpTY4NsycWPvhORWohL8vNy4S66Q2AYSvWZJ/6OPkoRSSnPRglSDUbgzQ==","_from":"pub-theme-pubblog@1.2.10"},"pkgName":"pub-theme-pubblog","dir":"/home/runner/work/cloudflare-pages-test/cloudflare-pages-test/node_modules/pub-theme-pubblog"},"_resolved":true,"production":false,"port":"3001","fqImages":"","staticHost":true}